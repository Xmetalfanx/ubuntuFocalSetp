. $configDir/gnomeExtConfigs.cfg


function gnomeShellExt_soundInputOutputChooser()
{
    url="https://github.com/kgshank/gse-sound-output-device-chooser.git"
    getExtension $url

}


function gnomeShellExt_nightLightSlider()
{
    url="https://github.com/kiyui/gnome-shell-night-light-slider-extension.git"

    getExtension $url

    # Needs testing since i changed this from a function to a variable call that has a function assigned to it) 
    recompileSchemas $extractionLocation

    clear
    echo -e "Something I have noticed repeatedly testing Nightlight Slider, is that sometimes it will install fine but even if you refresh Gnome Shell, it MAY display an error ... if you Refresh again (ALT + F2, then type r and hit enter), it is perfectly fine"
    userPrompt

}

function gnomeShellExt_impatience()
{
    ## For now i am not template-afying this to make it easier on myself

    gnomeDownloadsCleanup

    url="https://github.com/timbertson/gnome-shell-impatience.git"

    getFileInfo $url

    mkdir $localGnomeExtDownloadDir/$fileName

    echo -e "Getting Impatience Gnome Extension"
    git clone $url $localGnomeExtDownloadDir/$fileName

    extensionUUID=$(find $localGnomeExtDownloadDir/$fileName -type f -name "metadata.json" -exec cat {} + | grep -m1 -i uuid | cut -d: -f2 | sed 's/ //g;s/"//g;s/,//g')

    # file name is the git repo name without the .git ... just as a reminder
    mv $localGnomeExtDownloadDir/$fileName/impatience  $localGnomeExtDownloadDir/$fileName/$extensionUUID

    echo -e "Copying impatience to .local location"
    cp -R $localGnomeExtDownloadDir/$fileName/$extensionUUID $localGnomeExtLocation/$extensionUUID

    restartAndEnable_Prompt

}

function gnomeShellExt_transparentWindowMoving()
{
    url="https://github.com/Noobsai/transparent-window-moving.git"
    gitGnomeExt_makeInstall $url
}


function gnomeShellExt_smartTransparentTopBar()
{
    url="https://github.com/aunetx/gnome-shell-extension-transparent-top-bar"
    gitGnomeExt_makeInstall $url
}

function gnomeShellExt_ExtUpdateNotification()
{
    url="https://github.com/franglais125/update-extensions"
    gitGnomeExt_makeInstall $url
}

# Panel icon to make it easier to enable/disable extensions and get to the settings for them
function gnomeShellExt_Extensions()
{
    url="https://github.com/petres/gnome-shell-extension-extensions.git"
    getExtension $url
}


####################################################################################################
# Gnome repo Gnome Extenstions related

# This repo has a number of extensions in it .. I am not sure how to even start withOUT git cloning the entire repo

# idea: there should be a menu maybe specifically for these
# idea: there would be a variable that gets passed that is the name of the desired extension perhaps

# the metadata file is "metadata.json.in" here

# this should not run until the user WANTS ... ER WAIT ... should the menu BE INSIDE this function?
function gnomeShellExt_GnomeMaster
{

    url="https://gitlab.gnome.org/GNOME/gnome-shell-extensions.git"

    # I dont know about the var name for now ... but it's good enough i suppose
    git clone $url "gnomeExtensionSet"

    cd extensions/$foobar #foobar = var passed that I haven't created yet ... the name of the desired extension

}



###################################################################################################
# bad name i know
function getGnomeGnomeExtensions()
{
    url="https://gitlab.gnome.org/GNOME/gnome-shell-extensions"

    getFileInfo $url
    mkdir $localGnomeExtDownloadDir/$fileName


    get clone $url $localGnomeExtDownloadDir/$fileName

    # Here the entire repo is cloned
    # Extensions are in the 'extensions' subfolder



}


function gnomeShellExt_GnomeExtensionMenu()
{

    echo -e " "


    echo -e "1. \t Install Apps Menu"
    echo -e "2. \t Install Auto Move Windows"
    echo -e "3. \t Install Drive Menu"
    echo -e "4. \t Install Launch New Instance"
    echo -e "5. \t Install Native Window Placement"
    echo -e "6. \t Install Places Menu"
    echo -e "7. \t Install Screenshot Window Sizer"
    echo -e "8. \t Install User Theme"
    echo -e "9. \t Install Window List"
    echo -e "10. \t Install Windows Navigator"
    echo -e "11. \t Install Workspace Indicator"
    read -p GnomeGnomeExtChoice


    case $GnomeGnomeExtChoice in

        1) apps-menu

        2) auto-move-windows

        3) drive-menu

        4) launch-new-instance

        5) native-window-placement

        6) places-menu

        7) screenshot-window-sizer

        8) user-theme

        9) window-list

        10) windowsNavigator

        11) workspace-indicator

    esac



}
