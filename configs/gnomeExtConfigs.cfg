# https://itsfoss.com/gnome-shell-extensions/
# https://linuxconfig.org/how-to-install-gnome-shell-extensions-from-zip-file-using-command-line-on-ubuntu-18-04-bionic-beaver-linux

localGnomeExtLocation=~/.local/share/gnome-shell/extensions/

# To make things more organized... that is the idea
localGnomeExtDownloadDir=~/Downloads/GnomeExtensions


## extractionLocation is a combo of the .local path AND THE individual gnome ext directory in there 
# ?? since i switched this from a function to a variable .... is this var known when it's called? 


function recompileSchemas()
{
    # Fix for missing file issue
    glib-compile-schemas $extractionLocation/schemas
}


function gnomeDownloadsCleanup()
{
    echo -e "Cleaning up Local Gnome Extensions download directory"
    rm -rf $localGnomeExtDownloadDir
}

# Gets info about the file
function getFileInfo()
{
    # Repo name including the .git part if a git URL
    fullFilename=$(basename $url)

    # JUST the file name
    fileName=$( echo $fullFilename | cut -d. -f1)

    extension=$( echo $fullFilename | cut -d. -f2)
}

function getGnomeExtInfo
{
    find . -type f -name "metadata.json" -exec cat {} + | grep -m1 -i $1 | cut -d: -f2 | sed 's/ //g;s/"//g;s/,//g'
}

#######################################################################
function gitGnomeExt_restartMessage()
{
    #clear
    echo -e "For this to take effect please either:"
    echo
    echo -e "logout and log back in OR press ALT+F2... then type 'r' and hit enter"
    echo
    echo -e "if you do the second option, things may seem frozen for a few moments and you will see a box with 'restarting' on your screen"
    echo -e "This pause/freeze is NORMAL "

    userPrompt
}


function restartAndEnable_Prompt()
{

    clear

    echo -e "Do you want to restart Gnome-shell and enable $extensionName ?"
    read -p "(Y/N)?: " restartEnableChoice

    case $restartEnableChoice in

        [yY])
            # Restart Gnome
            echo -e "About to restart Gnome-shell"
            userPrompt
            killall -3 gnome-shell

            # Enable extension
            clear
            echo -e "Enabling $extensionName"
            userPrompt
            gnome-extensions enable $extensionUUID

            return

            ;;

        [nN])

            gitGnomeExt_restartMessage
            return
                ;;

        *)
        echo -e "Invalid Selection"
                ;;

    esac
}


##########################################################################################################
gitGnomeExt_makeInstall()
{
    # Cleans up existing data which may cause issues if there already
    gnomeDownloadsCleanup

    mkdir $localGnomeExtDownloadDir
    cd $localGnomeExtDownloadDir

    # get some needed info based on the $url var
    getFileInfo $url

    # Download via git clone
    git clone $url

    # cd into git cloned directory ... $fileName is found in getFileInfo function
    cd $fileName

    # run make install
    make install

    restartAndEnable_Prompt

    gnomeDownloadsCleanup

}


## By the end of this the file is only downloaded
function getExtension()
{
    # Cleans up existing data which may cause issues if there already
    gnomeDownloadsCleanup

    getFileInfo

    #change pwd
    mkdir $localGnomeExtDownloadDir
    cd $localGnomeExtDownloadDir

    if [ "$extension" == "git" ]; then

        # the fileName var is the same as the name of the output Dir for the record
        if [ ! -d "$fileName" ]; then
            git clone $url
        else
            echo -e "Directory already exists"
            userPrompt
        fi

            # cd into directory
            cd $fileName

            # no idea if this is going to work
            extensionName=$( getGnomeExtInfo "name" )
            extensionUUID=$( getGnomeExtInfo "uuid" )

            extractionLocation=$localGnomeExtLocation$extensionUUID

            clear
            echo -e "Manually Installing $extensionName"

            # Note to self: we are IN the ext directory here ... .in the Downloads folder

            if [ ! -d $extractionLocation ]; then

                # makes directory in proper location
                echo -e "Creating needed directory: $extractionLocation"
                mkdir -p $

                ## Debugging only
                userPrompt

                echo -e "Copying Extension to Home folder location"
                cp -r $extensionUUID $localGnomeExtLocation

                ## Debugging only
                userPrompt

                restartAndEnable_Prompt

            else
                echo -e "$extractionLocation already exists"
                userPrompt

            fi

           gnomeDownloadsCleanup


    elif [ "$extension" == "zip" ]; then
        wget $url

    else
        echo -e "Uknown Error"
        userPrompt
    fi

}
